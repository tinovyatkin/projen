{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": ""
      },
      "steps": [
        {
          "builtin": "release/bump-version"
        }
      ],
      "condition": "! git log --oneline -1 | grep -q \"chore(release):\""
    },
    "bundle:task-runner": {
      "name": "bundle:task-runner",
      "description": "Bundle the run-task script needed for \"projen eject\"",
      "steps": [
        {
          "exec": "esbuild src/task-runtime.ts --outfile=lib/run-task.js --bundle --platform=node --external:\"*/package.json\""
        },
        {
          "exec": "echo \"#!/usr/bin/env node\" | cat - lib/run-task.js | tee lib/run-task.js > /dev/null",
          "name": "Insert Node shebang to beginning of the file"
        },
        {
          "exec": "echo \"const runtime = new TaskRuntime(\\\".\\\");\nruntime.runTask(process.argv[2]);\" >> lib/run-task.js",
          "name": "Add driver code to end of the file"
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compat": {
      "name": "compat",
      "description": "Perform API compatibility check against latest version",
      "steps": [
        {
          "exec": "jsii-diff npm:$(node -p \"require('./package.json').name\") -k --ignore-file .compatignore || (echo \"\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n\" && exit 1)"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "jsii --silence-warnings=reserved-word"
        }
      ]
    },
    "contributors:update": {
      "name": "contributors:update",
      "steps": [
        {
          "exec": "all-contributors check | grep \"Missing contributors\" -A 1 | tail -n1 | sed -e \"s/,//g\" | xargs -n1 | grep -v \"\\[bot\\]\" | grep -v \"cdklabs-automation\" | xargs -n1 -I{} all-contributors add {} code"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "node .projenrc.js"
        }
      ]
    },
    "devenv:setup": {
      "name": "devenv:setup",
      "steps": [
        {
          "exec": "yarn install"
        },
        {
          "spawn": "build"
        }
      ]
    },
    "docgen": {
      "name": "docgen",
      "description": "Generate API.md from .jsii manifest",
      "steps": [
        {
          "exec": "jsii-docgen -o docs/api/API.md"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools .projenrc.js"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "yarn install --check-files"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "yarn install --check-files --frozen-lockfile"
        }
      ]
    },
    "integ": {
      "name": "integ",
      "description": "Run integration tests",
      "steps": [
        {
          "spawn": "compile"
        },
        {
          "spawn": "package:python"
        },
        {
          "spawn": "integ:python-compat"
        }
      ]
    },
    "integ:python-compat": {
      "name": "integ:python-compat",
      "description": "Checks that projen's submodule structure does not cause import failures for python. Expects python to be installed and projen to be fully built.",
      "steps": [
        {
          "exec": "scripts/python-compat.sh"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "if [ ! -z ${CI} ]; then rsync -a . .repo --exclude .git --exclude node_modules && rm -rf dist && mv .repo dist; else /bin/bash ./projen.bash package-all; fi"
        }
      ]
    },
    "package-all": {
      "name": "package-all",
      "description": "Packages artifacts for all target languages",
      "steps": [
        {
          "spawn": "package:js"
        },
        {
          "spawn": "package:java"
        },
        {
          "spawn": "package:python"
        },
        {
          "spawn": "package:go"
        }
      ]
    },
    "package:go": {
      "name": "package:go",
      "description": "Create go language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target go"
        }
      ]
    },
    "package:java": {
      "name": "package:java",
      "description": "Create java language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target java"
        }
      ]
    },
    "package:js": {
      "name": "package:js",
      "description": "Create js language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target js"
        }
      ]
    },
    "package:python": {
      "name": "package:python",
      "description": "Create python language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target python"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "spawn": "docgen"
        },
        {
          "spawn": "readme-macros"
        },
        {
          "spawn": "bundle:task-runner"
        },
        {
          "spawn": "default"
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "readme-macros": {
      "name": "readme-macros",
      "steps": [
        {
          "exec": "mv README.md README.md.bak"
        },
        {
          "exec": "cat README.md.bak | markmac > README.md"
        },
        {
          "exec": "rm README.md.bak"
        }
      ]
    },
    "release": {
      "name": "release",
      "description": "Prepare a release from \"main\" branch",
      "env": {
        "RELEASE": "true"
      },
      "steps": [
        {
          "exec": "rm -fr dist"
        },
        {
          "spawn": "bump"
        },
        {
          "spawn": "build"
        },
        {
          "spawn": "unbump"
        },
        {
          "exec": "git diff --ignore-space-at-eol --exit-code"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --coverageProvider=v8 --updateSnapshot",
          "receiveArgs": true
        },
        {
          "spawn": "eslint"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "unbump": {
      "name": "unbump",
      "description": "Restores version to 0.0.0",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": ""
      },
      "steps": [
        {
          "builtin": "release/reset-version"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "yarn upgrade npm-check-updates"
        },
        {
          "exec": "npm-check-updates --upgrade --target=minor --filter=@types/conventional-changelog-config-spec,@types/glob,@types/ini,@types/jest,@types/node,@types/semver,@types/yargs,@typescript-eslint/eslint-plugin,@typescript-eslint/parser,all-contributors-cli,esbuild,eslint-config-prettier,eslint-import-resolver-node,eslint-import-resolver-typescript,eslint-plugin-import,eslint-plugin-prettier,eslint,jest,jest-junit,jsii-diff,jsii-docgen,jsii-pacmak,npm-check-updates,prettier,standard-version,ts-jest,@iarna/toml,case,chalk,conventional-changelog-config-spec,fast-json-patch,glob,ini,semver,shx,xmlbuilder2,yaml,yargs"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade @types/conventional-changelog-config-spec @types/glob @types/ini @types/jest @types/node @types/semver @types/yargs @typescript-eslint/eslint-plugin @typescript-eslint/parser all-contributors-cli esbuild eslint-config-prettier eslint-import-resolver-node eslint-import-resolver-typescript eslint-plugin-import eslint-plugin-prettier eslint jest jest-junit jsii-diff jsii-docgen jsii-pacmak npm-check-updates prettier standard-version ts-jest @iarna/toml case chalk conventional-changelog-config-spec fast-json-patch glob ini semver shx xmlbuilder2 yaml yargs"
        },
        {
          "exec": "/bin/bash ./projen.bash"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "jsii -w --silence-warnings=reserved-word"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"/bin/bash ./projen.bash\"."
}
